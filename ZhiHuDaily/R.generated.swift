//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 18 images.
  struct image {
    /// Image `Menu_Avatar_Mask`.
    static let menu_Avatar_Mask = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Avatar_Mask")
    /// Image `Menu_Avatar`.
    static let menu_Avatar = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Avatar")
    /// Image `Menu_Close`.
    static let menu_Close = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Close")
    /// Image `Menu_Dark`.
    static let menu_Dark = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Dark")
    /// Image `Menu_Day`.
    static let menu_Day = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Day")
    /// Image `Menu_Download`.
    static let menu_Download = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Download")
    /// Image `Menu_Enter`.
    static let menu_Enter = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Enter")
    /// Image `Menu_Follow`.
    static let menu_Follow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Follow")
    /// Image `Menu_Icon_Collect`.
    static let menu_Icon_Collect = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Icon_Collect")
    /// Image `Menu_Icon_Events_Clicked`.
    static let menu_Icon_Events_Clicked = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Icon_Events_Clicked")
    /// Image `Menu_Icon_Events`.
    static let menu_Icon_Events = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Icon_Events")
    /// Image `Menu_Icon_Home_Highlight`.
    static let menu_Icon_Home_Highlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Icon_Home_Highlight")
    /// Image `Menu_Icon_Home`.
    static let menu_Icon_Home = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Icon_Home")
    /// Image `Menu_Icon_Message_Point`.
    static let menu_Icon_Message_Point = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Icon_Message_Point")
    /// Image `Menu_Icon_Message`.
    static let menu_Icon_Message = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Icon_Message")
    /// Image `Menu_Icon_Setting`.
    static let menu_Icon_Setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Icon_Setting")
    /// Image `Menu_Mask`.
    static let menu_Mask = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_Mask")
    /// Image `Menu_New`.
    static let menu_New = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu_New")
    
    /// `UIImage(named: "Menu_Avatar", bundle: ..., traitCollection: ...)`
    static func menu_Avatar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Avatar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Avatar_Mask", bundle: ..., traitCollection: ...)`
    static func menu_Avatar_Mask(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Avatar_Mask, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Close", bundle: ..., traitCollection: ...)`
    static func menu_Close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Dark", bundle: ..., traitCollection: ...)`
    static func menu_Dark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Dark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Day", bundle: ..., traitCollection: ...)`
    static func menu_Day(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Day, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Download", bundle: ..., traitCollection: ...)`
    static func menu_Download(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Download, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Enter", bundle: ..., traitCollection: ...)`
    static func menu_Enter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Enter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Follow", bundle: ..., traitCollection: ...)`
    static func menu_Follow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Follow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Icon_Collect", bundle: ..., traitCollection: ...)`
    static func menu_Icon_Collect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Icon_Collect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Icon_Events", bundle: ..., traitCollection: ...)`
    static func menu_Icon_Events(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Icon_Events, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Icon_Events_Clicked", bundle: ..., traitCollection: ...)`
    static func menu_Icon_Events_Clicked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Icon_Events_Clicked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Icon_Home", bundle: ..., traitCollection: ...)`
    static func menu_Icon_Home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Icon_Home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Icon_Home_Highlight", bundle: ..., traitCollection: ...)`
    static func menu_Icon_Home_Highlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Icon_Home_Highlight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Icon_Message", bundle: ..., traitCollection: ...)`
    static func menu_Icon_Message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Icon_Message, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Icon_Message_Point", bundle: ..., traitCollection: ...)`
    static func menu_Icon_Message_Point(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Icon_Message_Point, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Icon_Setting", bundle: ..., traitCollection: ...)`
    static func menu_Icon_Setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Icon_Setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_Mask", bundle: ..., traitCollection: ...)`
    static func menu_Mask(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_Mask, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu_New", bundle: ..., traitCollection: ...)`
    static func menu_New(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_New, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `KMStoryboard`.
    static let kmStoryboard = _R.storyboard.kmStoryboard()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "KMStoryboard", bundle: ...)`
    static func kmStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.kmStoryboard)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try kmStoryboard.validate()
    }
    
    struct kmStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let kmHomeViewController = StoryboardViewControllerResource<KMHomeViewController>(identifier: "KMHomeViewController")
      let kmMenuViewController = StoryboardViewControllerResource<KMMenuViewController>(identifier: "KMMenuViewController")
      let name = "KMStoryboard"
      
      func kmHomeViewController(_: Void = ()) -> KMHomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: kmHomeViewController)
      }
      
      func kmMenuViewController(_: Void = ()) -> KMMenuViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: kmMenuViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Menu_Avatar") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Menu_Avatar' is used in storyboard 'KMStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Menu_Icon_Setting") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Menu_Icon_Setting' is used in storyboard 'KMStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Menu_Enter") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Menu_Enter' is used in storyboard 'KMStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Menu_Icon_Home") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Menu_Icon_Home' is used in storyboard 'KMStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Menu_Icon_Collect") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Menu_Icon_Collect' is used in storyboard 'KMStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Menu_Mask") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Menu_Mask' is used in storyboard 'KMStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Menu_Download") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Menu_Download' is used in storyboard 'KMStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Menu_Dark") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Menu_Dark' is used in storyboard 'KMStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Menu_Icon_Message") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Menu_Icon_Message' is used in storyboard 'KMStoryboard', but couldn't be loaded.") }
        if _R.storyboard.kmStoryboard().kmMenuViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'kmMenuViewController' could not be loaded from storyboard 'KMStoryboard' as 'KMMenuViewController'.") }
        if _R.storyboard.kmStoryboard().kmHomeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'kmHomeViewController' could not be loaded from storyboard 'KMStoryboard' as 'KMHomeViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = ViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
